const { MerkleTree } = require('merkletreejs');
const keccak256 = require('keccak256');

let MetalListAddresses = [ 
"0x931E2f144e227eCa27D40966F8d5DAAd6D9C7c08",
"0x2DB96E1400F86BF088e8D02eC4fc07f18E93dece",
"0xb230Eeec2b94dBf0215f27C082E315E167Ea7356",   
"0x80efe813aDE2A7F2453221a918B84446d3aB23bc",
"0xf140Ff588692C19574e309b6Be7C4F4cDb189D3C",
"0x4547B6B26371118427622262698CEd14b75a8fdb", 
"0xbeDA6D0e673812C703faE4cB12b73fD0C89A43f6", 
"0x1D4bfeEAE08BE4069145460f8f765Fdb6332Bc90", 
"0x73a9a8932dc806696b32e45f5580963FEFf1B8ad", 
"0x7f43564f7a250FF6557DFaE96D33833B656c43a2", 
"0xE4E8b4b0330C6753149E77f9Cd3dd70334452592", 
"0x5372074dc71a429D1A700D33833ef801a6204D73", 
"0x7764fF60D5717895cF924Be792E0a56517194427", 
"0x234c9Dc1fF5cAf605Cc702Efa51A4a6Be5A66649", 
"0x80E6A99079e4407dF210e07a734D82eb3EA84Ed1", 
"0x337081bE65bCBD7ad333b2998e9d485b344960f8", 
"0xFDc1aF947BbA3b6F194EcBb29cec815F656B5570", 
"0xeF7434f0526C9e212164CA406E16Fb8285a04E3b", 
"0xd685ae7fe1ad96c3a61e46e8df7ff1e92556871c", 
"0xd1139E1399a28bec0660719E34Fd3c59e185D0fb", 
"0xBB61b3e104Da1f18263A9d34f37751f75C9Dc6fA", 
"0xaD0880d224c786775020535a5A6561c8Dff39753", 
"0x31Ad74365e6190e608D053670e65ed35fF6337fb", 
"0xC473a5c786b6cA6d7D4b563f99e0E63C95Ab64f2", 
"0xB51F67a9BF17E1c2e5a51010b83A3926a06dfDa8", 
"0x21a58b1A3DfbE210cfb10A79049E56f655307de9", 
"0xb89CfDea076C351cc81FFC9fCdE8c7b594c220b5", 
"0x5059ff54E5aBB22DF5277e0595a1823173496Ad0", 
"0x10e72bd52278c1572b1ba1b2454629bddab5e858", 
"0x633691C4dd2831c6DfBB8035431E4e5CD72F8d2B", 
"0xFD287B8aDc6E880CBE8a0f93f807F25C2d912A7D", 
"0x18a399dc48573A36e62d2ccff757604D6A6a0f6b",
"0xd2f1bd876e2f1ea5d213b82ced5c8c307856ea2e",
"0x7b7a9a6Fe5055a0A2C1e31cf746525e788DE9008",
"0x7767A99F43c560902cBb5da5dBdbD56Ef161231E",
"0x3753B3AeAA4310EBa3B5803ee97bE8101bCd1015"

  ];


const leafNodes = MetalListAddresses.map(addr => keccak256(addr));
const merkleTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true});


const rootHash = merkleTree.getRoot();
console.log('Metal List Merkle Tree\n', merkleTree.toString());
console.log("Root Hash: ", rootHash);



const claimingAddress = leafNodes[6];
const claimingAddress = keccak256("0x7767A99F43c560902cBb5da5dBdbD56Ef161231E");


const hexProof = merkleTree.getHexProof(claimingAddress);
console.log(hexProof);


console.log(merkleTree.verify(hexProof, claimingAddress, rootH
